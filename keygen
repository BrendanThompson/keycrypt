#!/bin/bash

# KEYNAME=$1
# KEYPATH=$2
TMP_PASS="bubbl3s"
OLD_KEY=""

##########################################################################################

function removeKey() {
	local KEY=$1

	if [[ $(rm -rf $KEY) ]]; then
		echo '$KEY was deleted.'
	else
		echo 'Whoops'
	fi
	

	
}

function backupKey() {
	local KEY=$1
	local COMMAND="mv $KEY $KEY.bak"
	
	if [[ -f $KEY ]]; then
		$COMMAND
	else
		echo "$KEY doesn't exist"
		exit 0
	fi
	
	if [[ -f "$KEY.bak" ]]; then
		OLD_KEY="$KEY.bak"
		echo "Backed up key here: $OLD_KEY"
	else
		echo "Something went wrong"
	fi
}

function encryptKey() {
	local KEY=$1
	local COMMAND='openssl pkcs8 -topk8 -v2 des3'
	local PASS=""
	local CONFIRM_PASS=""
	
	read -s -p "Password: " PASS
	echo ""
	read -s -p "Confirm Password: " CONFIRM_PASS
	echo""
	
	if [[ "$PASS" == "$CONFIRM_PASS" ]]; then
		echo "Passwords Match!"
		backupKey $KEY
		
		COMMAND="$COMMAND -in $OLD_KEY -passin 'pass:bubbl3s' -out $KEY -passout 'pass:$PASS'"
		
		$COMMAND
	else
		echo "Password don't match"
	fi
	
}

function createKey() {
	local KEY=$1
	local TYPE
	local BITS
	local OUTPUT_DIR
	local COMMENT
	local PASS="-N $TMP_PASS"
	local COMMAND='ssh-keygen'

	## ssh-keygen -t $TYPE -b $BITS -C $COMMENT -f $OUTPUT_DIR

	echo -n 'What key type (RSA/DSA)? '
	read TYPE

	if [[ $TYPE == [rR][sS][aA] ]]; then
		TYPE=' -t RSA'
	elif [[ $TYPE == [dD][sS][aA] ]]; then
		TYPE=' -t DSA'
	else
		echo 'This is not a valide type!'
	fi

	echo -n 'Bit size (1024/2048/4096/8192)? '
	read BITS

	if [[ $BITS == '1024' ]]; then
		BITS=' -b 1024'
	elif [[ $BITS == '2048' ]]; then
		BITS=' -b 2048'
	elif [[ $BITS == '4096' ]]; then
		BITS=' -b 4096'
	elif [[ $BITS == '8192' ]]; then
		BITS=' -b 8192'
	else
		echo 'Invalid bit size.'
	fi
	
	# echo -n "Output Directory: "
	# read OUTPUT_DIR
	OUTPUT_DIR="-f $KEY"
	
	COMMAND="$COMMAND $TYPE $BITS $OUTPUT_DIR $PASS"
	# echo "$OUTPUT_DIR"
	$COMMAND
}

function checkKeyExistence() {
	local KEY=$2$1

	if [[ -f $KEY ]]; then
		echo '$1 exists in $2'
		echo -n 'Would you like to remove [y/n]: '
		read USERINPUT

		case $USERINPUT in
			[yY] | [yY][eE][sS] )
				removeKey $KEY
				;;
			[nN] | [nN][oO] )
				echo '$KEY was not deleted. Will now exit.'
				;;
			* )
				echo 'Invalid Input.'
				;;
		esac
	else
		echo 'Key does not currently exist will now create.'
		createKey
	fi
}

##########################################################################################

# createKey

case $1 in
	"hello" )
		echo "Hello, $2"
		;;
	[tT][eE][sS][tT] )
		encryptKey $2
		;;
	[cC][rR][eE][aA][tT][eE] )
		createKey $2
		encryptKey $2
		;;
	* )
		echo 'Invalid Option'
		;;
esac