#!/bin/bash

##########################################################################################
#################################    Global Variables    #################################
##########################################################################################

VERSION="0.0.1"
TMP_PASS="bubbl3s"
GKEY=""
OLD_KEY=""

##########################################################################################
##################################    Main Functions    ##################################
##########################################################################################

function defaultKeyLocation() {
	local KEY=$1
	local default="/Users/$(whoami)/.ssh/"
	
	if [[ $KEY == *\/* ]] || [[ $KEY == *\\* ]]; then
		GKEY=$KEY
	else
		GKEY="$default$KEY"
	fi
}

function removeKey() {
	local KEY=$1

	if [[ $(rm -rf $KEY) ]]; then
		echo '$KEY was deleted.'
	else
		echo 'Whoops'
	fi	
}

function backupKey() {
	local KEY=$1
	local COMMAND="mv $KEY $KEY.bak"
	
	if [[ -f $KEY ]]; then
		$COMMAND
	else
		echo "$KEY doesn't exist"
		exit 0
	fi
	
	if [[ -f "$KEY.bak" ]]; then
		OLD_KEY="$KEY.bak"
		echo "Backed up key here: $OLD_KEY"
	else
		echo "Something went wrong"
	fi
}

function fixPermissions() {
	local KEY=$1
	local COMMAND="chmod 600 $KEY"
	$COMMAND
}

function encryptKey() {
	local KEY=$1
	local COMMAND='openssl pkcs8 -topk8 -v2 des3'
	local PASS=""
	local CONFIRM_PASS=""
	
	read -s -p "Password: " PASS
	echo ""
	read -s -p "Confirm Password: " CONFIRM_PASS
	echo""
	
	if [[ "$PASS" == "$CONFIRM_PASS" ]]; then
		echo "Passwords Match!"
		backupKey $KEY
		
		COMMAND="$COMMAND -in $OLD_KEY -passin pass:$TMP_PASS -out $KEY -passout pass:$PASS 1> /dev/null"
		$COMMAND
		fixPermissions $KEY
	else
		echo "Password don't match"
	fi
	
}

function createKey() {
	local KEY=$1
	local TYPE
	local BITS
	local OUTPUT_DIR
	local COMMENT
	local PASS="-N $TMP_PASS"
	local COMMAND='ssh-keygen'

	echo -n 'What key type (RSA/DSA)? '
	read TYPE

	if [[ $TYPE == [rR][sS][aA] ]]; then
		TYPE=' -t RSA'
	elif [[ $TYPE == [dD][sS][aA] ]]; then
		TYPE=' -t DSA'
	else
		echo 'This is not a valide type!'
	fi

	echo -n 'Bit size (1024/2048/4096/8192)? '
	read BITS

	if [[ $BITS == '1024' ]]; then
		BITS=' -b 1024'
	elif [[ $BITS == '2048' ]]; then
		BITS=' -b 2048'
	elif [[ $BITS == '4096' ]]; then
		BITS=' -b 4096'
	elif [[ $BITS == '8192' ]]; then
		BITS=' -b 8192'
	else
		echo 'Invalid bit size.'
	fi
	
	OUTPUT_DIR="-f $KEY"
	
	COMMAND="$COMMAND $TYPE $BITS $OUTPUT_DIR $PASS"
	
	$COMMAND 1> /dev/null
}

function checkKeyExistence() {
	local KEY=$1

	if [[ -f $KEY ]]; then
		echo '$1 exists'
		echo -n 'Would you like to remove [y/n]: '
		read USERINPUT

		case $USERINPUT in
			[yY] | [yY][eE][sS] )
				removeKey $KEY
				;;
			[nN] | [nN][oO] )
				echo '$KEY was not deleted. Will now exit.'
				exit 1
				;;
			* )
				echo 'Invalid Input.'
				;;
		esac
	else
		echo 'Key does not currently exist will now create.'
		createKey $KEY
	fi
}

function exportKey() {
	local KEY=$GKEY
	local PUBKEY="$GKEY.pub"
	local ID=""
	local SERVER=""
	local PORT=""
	local COMMAND=""

	echo -n "Remote Server (user@server:port): "
	read SERVER

	SERVER="$(cut -d ":" -f 1 <<< $SERVER)"
	PORT="$(cut -d ":" -f 2 <<< $SERVER)"

	if [[ -f $PUBKEY ]]	; then
		if [ x$SSH_AUTH_SOCK != x ] ; then
    		GET_ID="$GET_ID ssh-add -L | grep -vxF 'The agent has no identities.'"
  		fi
	else
		echo "The key supplied doesn't exist."
	fi

}

function usage() {
	cat <<EOF
Usage
------

create 		This will create a new key and then encrypt it.
			You should supply a keyname and/or path.
encrypt 	This will encrypt a pre-existing key.
			Supply the path to the key.

---------------------------------------------------------

By default keygen will insert the key into ~/.ssh

EOF
}

##########################################################################################
##################################      Entry Point     ##################################
##########################################################################################

case $1 in
	"hello" )
		echo "Hello, $2"
		;;
	[tT][eE][sS][tT] )
		defaultKeyLocation $2
		echo "$GKEY"
		;;
	[cC][rR][eE][aA][tT][eE] )
		defaultKeyLocation $2
		checkKeyExistence $GKEY
		encryptKey $GKEY
		;;
	[eE][nN][cC][rR][yY][pP][tT] | [eE][nN][cC])
		defaultKeyLocation $2
		encryptKey $2
		;;
	[vV][eE][rR][sS][iI][oO][nN] | [vV] | [vV][eE][rR] )
		echo "keygen v$VERSION"
		;;
	[hH][eE][lL][pP] | "?" | [hH] )
		usage
		;;
	* )
		echo 'Invalid Option'
		;;
esac